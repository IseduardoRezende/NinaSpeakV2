@using NinaSpeakV2.Api.Extensions
@using NinaSpeakV2.Api.Utils
@using NinaSpeakV2.Domain.ViewModels.Institutions
@model ReadInstitutionViewModel

@{
    ViewData["Title"] = "Details";
    var urlToAction = Url.ActionLink("Create", "UserInstitution", new { InstitutionCode = Model.Code });
}

<style>
    .popup-overlay {
        display: none; /* Escondido por padrão */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .popup {
        display: none; /* Escondido por padrão */
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #fff;
        padding: 20px;
        border-radius: 5px;
        z-index: 1000;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }

    .popup-content {
        text-align: center;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }

    .pagination .page-link {
        color: #007bff;
    }

    .pagination .page-link:hover {
        background-color: #e9ecef;
        border-color: #dee2e6;
    }

    .pagination {
        margin-top: 20px;
    }
</style>

<h1 class="text-center">Detalhes da Instituição</h1>

<div class="text-end">
    <button class="btn btn-outline-primary" id="show-popup">Convidar Novo Membro</button>
</div>

<div class="popup-overlay" id="popup-overlay"></div>
<div class="popup" id="popup">
    <span class="close-btn" id="close-btn">&times;</span>
    <div class="popup-content">
        <h2 class="text-center">Convidar para Instituição&nbsp;</h2>
        <p>Copie o link abaixo e compartilhe:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" id="inviteLink" value="@urlToAction" readonly>
            <div class="input-group-append">
                <button class="btn btn-primary" type="button" id="copyBtn">Copiar</button>
            </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">
        <h4>Instituição: @Model.Name</h4>
    </div>
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-sm-2">
                <strong>Descrição:</strong>
            </div>
            <div class="col-sm-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @readonly = "readonly" })
            </div>
        </div>
        @if (Model.Name is not Constant.InstitutionStandardName && Model.Creator is not null)
        {
            <div class="row mb-3">
                <div class="col-sm-2">
                    <strong>Criado por:</strong>
                </div>
                <div class="col-sm-10">
                    @Html.DisplayFor(model => model.Creator!.UserEmail)
                </div>
            </div>
        }
        <div class="row mb-3">
            <div class="col-sm-2">
                <strong>N° Membros:</strong>
            </div>
            <div class="col-sm-10">
                @Html.DisplayFor(model => model.QtyMembers)
            </div>
        </div>
        @if (Model.Name is not Constant.InstitutionStandardName)
        {
            <div class="row mb-3">
                <div class="col-sm-2">
                    <strong>Membros:</strong>
                </div>
                <div class="col-sm-10">
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th>
                                    Email
                                </th>
                                <th>
                                    Proprietárioª
                                </th>                                
                            </tr>
                        </thead>
                        <tbody id="memberTableBody">
                            @foreach (var member in Model.Members)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => member.UserEmail)
                                    </td>
                                    <td>
                                        @if (member.Owner)
                                        {
                                            <input type="checkbox" checked="checked" class="form-check-input" disabled="disabled" />
                                        }
                                        else
                                        {
                                            <input type="checkbox" class="form-check-input" disabled="disabled" />
                                        }
                                    </td>                                    
                                </tr>
                            }
                        </tbody>
                    </table>
                    <nav>
                        <ul class="pagination justify-content-center" id="paginationControls">
                            <!-- Pagination controls will be inserted here by JavaScript -->
                        </ul>
                    </nav>
                </div>
            </div>
            <div>
                <button class="btn btn-outline-danger" id="show-exit-popup">Sair da Instituição</button>
            </div>

            <div class="popup-overlay" id="popup-exit-overlay"></div>
            <div class="popup" id="popup-exit">
                <span class="close-btn" id="close-exit-btn">&times;</span>
                <div class="popup-content">
                    <h2 class="text-center">Sair da Instituição&nbsp;</h2>
                    <hr />
                    <p>
                        Confirma que deseja sair?
                        <br /><br />
                        <strong>Não será mais possível acessar nada relacionado a Instituição.</strong>
                    </p>
                    <hr />
                    <div class="text-center">
                        <div class="input-group-append d-flex w-100 items-center justify-content-center">
                            <button class="btn btn-secondary" id="close-exit-btn-confirm">Cancelar</button>&nbsp;
                            <form asp-action="Delete" asp-controller="UserInstitution">
                                <input type="hidden" name="UserId" value="@User.GetCurrentUserId()" />
                                <input type="hidden" name="InstitutionId" value="@Model.Id" />
                                <input type="submit" value="Sair" class="btn btn-danger" />
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="text-center">
    <a asp-action="Index" class="btn btn-primary">Voltar</a>
</div>

@section Scripts {

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            // Seleciona os elementos
            const showPopupButton = document.getElementById('show-popup');
            const popup = document.getElementById('popup');
            const popupOverlay = document.getElementById('popup-overlay');
            const closeButton = document.getElementById('close-btn');
            const copyButton = document.getElementById('copyBtn');
            const inviteLinkInput = document.getElementById('inviteLink');

            // Adiciona evento de clique ao botão para mostrar o pop-up
            showPopupButton.addEventListener('click', () => {
                popup.style.display = 'block';
                popupOverlay.style.display = 'block';
            });

            // Adiciona evento de clique ao botão de fechar para ocultar o pop-up
            closeButton.addEventListener('click', () => {
                popup.style.display = 'none';
                popupOverlay.style.display = 'none';
            });

            // Adiciona evento de clique ao overlay para ocultar o pop-up
            popupOverlay.addEventListener('click', () => {
                popup.style.display = 'none';
                popupOverlay.style.display = 'none';
            });

            // Adiciona evento de clique ao botão de copiar para copiar o link
            copyButton.addEventListener('click', () => {
                inviteLinkInput.select();
                document.execCommand('copy');
                alert('Link copiado para a área de transferência!');
            });

            // Seleciona os elementos de saída
            const showExitPopupButton = document.getElementById('show-exit-popup');
            const popupExit = document.getElementById('popup-exit');
            const closeExitButton = document.getElementById('close-exit-btn');
            const closeButtonConfirm = document.getElementById('close-exit-btn-confirm');
            const popupExitOverlay = document.getElementById('popup-exit-overlay');

            // Adiciona evento de clique ao botão para mostrar o pop-up de saída
            showExitPopupButton.addEventListener('click', () => {
                popupExit.style.display = 'block';
                popupExitOverlay.style.display = 'block';
            });

            // Adiciona evento de clique ao botão de fechar para ocultar o pop-up de saída
            closeExitButton.addEventListener('click', () => {
                popupExit.style.display = 'none';
                popupExitOverlay.style.display = 'none';
            });

            // Adiciona evento de clique ao botão de cancelar para ocultar o pop-up de saída
            closeButtonConfirm.addEventListener('click', () => {
                popupExit.style.display = 'none';
                popupExitOverlay.style.display = 'none';
            });

            // Adiciona evento de clique ao overlay para ocultar o pop-up de saída
            popupExitOverlay.addEventListener('click', () => {
                popupExit.style.display = 'none';
                popupExitOverlay.style.display = 'none';
            });
        });

        $(document).ready(function () {
            const rowsPerPage = 5;
            const rows = $('#memberTableBody tr');
            const rowsCount = rows.length;
            const pageCount = Math.ceil(rowsCount / rowsPerPage);
            const paginationControls = $('#paginationControls');

            // Generate pagination controls
            for (let i = 1; i <= pageCount; i++) {
                paginationControls.append(`
                    <li class="page-item">
                        <a class="page-link" href="#">${i}</a>
                    </li>
                `);
            }

            // Display the first set of rows
            displayRows(1);

            // Handle pagination click events
            paginationControls.on('click', 'a', function (e) {
                e.preventDefault();
                const pageNumber = $(this).text();
                displayRows(pageNumber);
                // Highlight the active page number
                paginationControls.find('li').removeClass('active');
                $(this).parent().addClass('active');
            });

            function displayRows(pageNumber) {
                const start = (pageNumber - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                rows.hide();
                rows.slice(start, end).show();
            }

            // Set the first page as active by default
            paginationControls.find('li:first').addClass('active');
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
